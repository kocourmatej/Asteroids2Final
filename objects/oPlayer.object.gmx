<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Config

var_sprite_width = sprite_get_width(sprite_index);
var_sprite_height = sprite_get_height(sprite_index);


image_speed = 0;

ini_open("data.asteroids2")
image_index = ini_read_real("var","rocket",0) -1
hp = ini_read_real("shop","level_health["+string(image_index+1)+string("]"),100)
shield = ini_read_real("shop","level_shield[1]",20)



if (image_index = 0) {hp = hp*10+100}
if (image_index = 1) {hp = hp*12+80}

max_hp = hp;
max_shield = shield;
rychlost = 3;

level = 1
xp = 0
max_xp = 100;

max_rychlost = 5;
min_rychlost = 2;

dir = 0;
dir_s = 4;

direction = 0;

can_move = 1;
can_fire = 1;

bullet_type = "normal";

ammo[normal] = 999;
ammo[upgraded] = 10;

speed = rychlost;

bullet_reload[normal] = 10;
bullet_reload[upgraded] = 5;


bullet_spray[normal] = 5
bullet_spray[upgraded] = 3

shield_recovery = 30;


for(a = 1 a&lt;4 a+=1)
{
spell_cd[a] = 0;
}

spell_down[1] = 150;
spell_down[2] = 400

s_action_index[1] = 0;
s_action_index[2] = 1;

money_color = c_white;

money = 0;

draw_shield = 0;
draw_shield_alpha = 0;
alarm[1] = shield_recovery;

shield_index = 0;

magnet = 0;

time = 0;
alarm[11] = room_speed;
if (instance_number(oSoundController) = 0) {instance_create(x,y,oSoundController)}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create core instances
instance_create(x,y,oOptimalizace)

trackid = sga_CreateEmitter("Music/Afterburner.ogg")
k = 0.2


sga_Play(trackid)
sga_SetVol(trackid,k)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[11] = room_speed;
time += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>magnet = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = shield_recovery;
shield += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_fire = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Nothing to say about
iy = speed/15
image_xscale=1
image_xscale+= iy

if (can_move = 1)
{
if (keyboard_check(ord("D")) &amp;&amp; dir &lt; 30)
    {
    dir += dir_s;
    direction += dir_s;
    }
if (keyboard_check(ord("A")) &amp;&amp; dir &gt; -30)
    {
    dir -= dir_s;
    direction -= dir_s;
    }
    
if (keyboard_check(ord("W")) &amp;&amp; rychlost &lt; max_rychlost)
    {
    rychlost += 0.05;
    speed = rychlost;
    }    
if (keyboard_check(ord("S")) &amp;&amp; rychlost &gt; min_rychlost)
    {
    rychlost -= 0.05;
    speed = rychlost;
    }  
    
    if (can_fire = 1 and keyboard_check(vk_space))
        {
        can_fire = 0;
        
        switch(bullet_type)
            {
            case "normal": // if (bullet_type = "normal") 
                {
               
                alarm[0] = bullet_reload[normal];
                
                bullet = instance_create(x,y,obj_Bullet)
                bullet.type = "normal"
                bullet.rychlost = 12;
                bullet.max_rychlost = 15;
                bullet.dmg = 1;
                bullet.effect_trought = 0;
                bullet.direction += random(bullet_spray[normal])
                bullet.direction -= random(bullet_spray[normal])
                sga_PlayFX(oSoundController.sndBullet)
                break;
                }
                
                  case "upgraded": // if (bullet_type = "upgraded") 
                {
                 if (ammo[upgraded] &gt; 0)
                 {
                 ammo[upgraded] -= 1;
                alarm[0] = bullet_reload[upgraded];
                
                bullet = instance_create(x,y,obj_Bullet)
                bullet.type = "upgraded"
                bullet.rychlost = 12;
                bullet.max_rychlost = 19;
                bullet.dmg = 2;
                bullet.effect_trought = 0;
                bullet.direction += random(bullet_spray[upgraded])
                bullet.direction -= random(bullet_spray[upgraded])
                sga_PlayFX(oSoundController.sndBullet)

                
                }
                else {bullet_type = "normal"  event_user(0)}
                break;
                }

            }
        }    
        
if (keyboard_check_pressed(vk_alt)) 
    {
    transition_kind=15;
    room_restart();
    }
    
    
    if (keyboard_check_pressed(ord("E")))
       {
       switch(bullet_type)
       {
        case "normal": bullet_type = "upgraded" break;
        case "upgraded": bullet_type = "normal" break;

       }
        
       }
       
    if (keyboard_check_pressed(ord("Q")))
       {
       switch(bullet_type)
       {
        case "normal": bullet_type = "upgraded" break;
        case "upgraded": bullet_type = "normal" break;

       }
        
       }

       if (spell_cd[1] &gt; 0)
       {
        spell_cd[1] -= 1;
       }
       if (spell_cd[2] &gt; 0)
       {
        spell_cd[2] -= 1;
       }

       if (keyboard_check_pressed(ord("X")))
          {
           if (spell_cd[1] = 0)
              {
               spell_cd[1] = spell_down[1];
               scrEffectActionMagnet()
               instance_create(x,y,oActionMaskMagnet)
               magnet = 1;
               alarm[10] = 2;
              }
          }
          
       if (keyboard_check_pressed(ord("C")))
          {
           if (spell_cd[2] = 0)
              {
               spell_cd[2] = spell_down[2];
              
               instance_create(x,y,oLaser)          
              }
          }

}    

       
    image_angle = direction;
    scrEffectRocketTrail(speed)
    if (hp &lt;= 0) {room_restart()}
    if (shield &gt; max_shield) {shield = max_shield}
    if (xp &gt;= max_xp)
       {
        level +=1
        xp = 0;
        max_hp += 5;
        hp = max_hp;
        max_shield += 1;
        shield = max_shield;
        max_xp =(100 * log10(level)) // Fair trade, ne? ve hrách je všude kvadratika...
        instance_create(x,y,oLevelUp)
       }
       
    if (keyboard_check(vk_escape))
       {
        game_end()
       }
if (x &gt; room_width)
   {
    if (can_move =1)
       {
        i = instance_create(x,y,oCutscene)
        i.str = "Mission accomplished! ### Money collected: "+string(money)+string("#Time: ")+string(time)+string("seconds")
        
        folder = ini_open("data.asteroids2")
        temp_money = ini_read_real("var","money",0)
        ini_write_real("var","money",temp_money + money)
        ini_close()
       }
   }    
/* Audio TEST  
   if (keyboard_check_pressed(ord("O")))
      {
      if (k &lt; 1) {k += 0.1}
      sga_SetVol(trackid,k)
      } 
      
      if (keyboard_check_pressed(ord("P")))
      {
      if (k &gt; 0) {k -= 0.1}
      sga_SetVol(trackid,k)
      } 
*/
if (hp &gt; max_hp) {hp = max_hp}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  alarm[0] = bullet_reload[normal];
                
                bullet = instance_create(x,y,obj_Bullet)
                bullet.type = "normal"
                bullet.rychlost = 12;
                bullet.max_rychlost = 15;
                bullet.dmg = 1;
                bullet.effect_trought = 0;
                bullet.direction += random(bullet_spray[normal])
                bullet.direction -= random(bullet_spray[normal])
                sga_PlayFX(oSoundController.sndBullet)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &gt;= room_width)
{
sga_DestroyEmitter( trackid );

ini_open("data.asteroids2")
l = ini_read_real("var","campaign",1)
ini_write_real("var","campaign",l+1)
ini_close()
}
else
{
sound_stop_all()
transition_kind=15;
room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (can_move = 1)
{
/*con = oShaderBlur;

var_mouse_pos_x = mouse_x - (x-(var_sprite_width/2));
var_mouse_pos_y = mouse_y - (y-(var_sprite_height/2));

if con.shader_enabled and !con.full_screen_effect shader_set(shd_radial_blur);
    shader_set_uniform_f(con.uni_time, con.var_time_var);
    shader_set_uniform_f(con.uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(con.uni_resolution, var_sprite_width, var_sprite_height);
    shader_set_uniform_f(con.uni_radial_blur_offset, con.var_radial_blur_offset);
    shader_set_uniform_f(con.uni_radial_brightness, con.var_radial_brightness);
    /**/
    draw_self()



draw_sprite(sHealthbar,1,view_xview[0]+84,view_yview[0]+460)
draw_sprite_stretched(sHealthbar,0,view_xview[0]+84,view_yview[0]+460,(oPlayer.hp/oPlayer.max_hp)*sprite_get_width(sHealthbar),16)


draw_sprite(sShieldbar,1,view_xview[0]+84,view_yview[0]+453)
draw_sprite_stretched(sShieldbar,0,view_xview[0]+84,view_yview[0]+453,(oPlayer.shield/oPlayer.max_shield)*sprite_get_width(sHealthbar),8)

draw_sprite(sExpbar,1,view_xview[0]+84,view_yview[0]+476)
draw_sprite_stretched(sExpbar,0,view_xview[0]+84,view_yview[0]+476,(oPlayer.xp/oPlayer.max_xp)*sprite_get_width(sShieldbar),4)
draw_sprite(sExpbar,2,view_xview[0]+84,view_yview[0]+476)

draw_sprite(sActionsBar,0,view_xview[0]+640-32,view_yview[0]+480-96)
draw_sprite(sActions,s_action_index[1],view_xview[0]+640-32,view_yview[0]+480-96)
draw_sprite(sActions,s_action_index[2],view_xview[0]+640-32,view_yview[0]+480-96+32)



if (oPlayer.hp &gt; 0)
{
   draw_set_halign(fa_center)
   draw_set_valign(fa_middle)
draw_set_color(c_black)
draw_set_font(fntCambriaMathBig)

draw_text(view_xview[0]+324,view_yview[0]+467,oPlayer.hp)
draw_set_font(fntCambriaMath)
draw_set_color(make_color_rgb((-1*(oPlayer.hp - oPlayer.max_hp)*255/oPlayer.max_hp),(oPlayer.hp*(255/oPlayer.max_hp)),0))  

draw_text(view_xview[0]+324,view_yview[0]+467,oPlayer.hp)


   draw_set_halign(fa_left)
    draw_set_valign(fa_top)
}
draw_set_color(c_black)

draw_sprite(sGuiAmmo,0,view_xview[0],view_yview[0]+480-64)
draw_sprite(sSpeedBar,0,view_xview[0]+63,view_yview[0]+480)
rych = rychlost/max_rychlost
draw_set_color(c_white)
//draw_text(oPlayer.x,oPlayer.y,rych)
draw_sprite(sSpeedBar,2,view_xview[0]+63,view_yview[0]+480) 
if (rych &gt;= 0.52) {draw_sprite(sSpeedBar,2,view_xview[0]+63,view_yview[0]+470) }
if (rych &gt;= 0.64) {draw_sprite(sSpeedBar,2,view_xview[0]+63,view_yview[0]+460) }
if (rych &gt;= 0.76) {draw_sprite(sSpeedBar,2,view_xview[0]+63,view_yview[0]+450) }
if (rych &gt;= 0.88) {draw_sprite(sSpeedBar,2,view_xview[0]+63,view_yview[0]+440) }
if (rych &gt;= 0.99) {draw_sprite(sSpeedBar,2,view_xview[0]+63,view_yview[0]+430) }


if (bullet_type = "normal")
{
 draw_sprite(sGuiAmmo,1,view_xview[0],view_yview[0]+480-64)
 draw_set_color(c_black)
 draw_text(view_xview[0]+20,view_yview[0]+450-32,"Nan")
}
if (bullet_type = "upgraded")
{
 draw_sprite(sGuiAmmo,2,view_xview[0],view_yview[0]+480-64)
 draw_set_color(c_black)
 draw_text(view_xview[0]+20,view_yview[0]+450-32,ammo[upgraded])
}

draw_set_halign(fa_center)
   draw_set_valign(fa_middle)

if (spell_cd[1] &gt; 0)
   {
 
   
   draw_set_color(c_red)
   draw_set_alpha(0.4)

    draw_rectangle_cd(view_xview[0]+640-32,view_yview[0]+480-96,view_xview[0]+640-32+32,view_yview[0]+480-96+32,spell_cd[1]/spell_down[1])
    
      draw_set_color(c_black)
   draw_set_alpha(1)
    
   draw_text(view_xview[0]+640-16,view_yview[0]+480-96+16,round(spell_cd[1]/fps+1)+1)

   }
   
if (spell_cd[2] &gt; 0)
   {
 
   
   draw_set_color(c_red)
   draw_set_alpha(0.4)

    draw_rectangle_cd(view_xview[0]+640-32,view_yview[0]+480-96+32,view_xview[0]+640-32+32,view_yview[0]+32+480-96+32,spell_cd[2]/spell_down[2])
    
      draw_set_color(c_black)
   draw_set_alpha(1)
    
   draw_text(view_xview[0]+640-16,view_yview[0]+480-96+16+32,round(spell_cd[2]/fps+1)+1)

   }

draw_set_color(c_black)
draw_set_alpha(1)


 draw_set_halign(fa_left)
    draw_set_valign(fa_top)
     draw_set_font(fntCambriaMathSmall)
    draw_set_color(money_color)
    draw_text(view_xview[0]+12,view_yview[0]+480-96-10,"Money: "+string(money))
    
    
    
if (draw_shield = 1)
   {
    draw_sprite_ext(sShield,shield_index,view_xview,view_yview,1,1,0,c_white,draw_shield_alpha)
    if (draw_shield_alpha &gt; 0)
       {
        draw_shield_alpha -= 0.02
       }
       else {draw_shield = 0;}
   } 
   
//shader_reset();
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
